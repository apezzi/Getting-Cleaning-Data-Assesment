c(1, 2, 3, 4) + c(0, 10)
c(1, 2, 3, 4) + c(0, 10, 100)
c(1, 2, 3, 4) + c(0, 10, 100)
c(1, 2, 3, 4) + c(0, 10, 1000)
(z * 2 + 100)
(z * 2 + 1000)
info()
(z * 2 + 1000)
(z * 2 + 100)
(z * 2 + 1000)
info()
(z * 2 + 1000)
(z * 2 + 1000)
(z * 2 + 10)
(z * 2 + 1000)
(z * 2 + 100)
nxt()
(z * 2 + 1000)
(z * 2 + 100)
(z * 2 + 1000)
nxt()
z * 2 + 1000
my_div
x <- c(3, 5, 1, 10, 12, 6)
x[x < 6] <- 0
x[x < 6] <- 0
x[x < 6] == 0
x <- c(3, 5, 1, 10, 12, 6)
x[x < 6] == 0
x
x <- c(3, 5, 1, 10, 12, 6)
x
x
x[x < 6] == 0
x
x[x < 6] <- 0
x
a<-1:22
a
swirl()
getwd()
ls()
x<-9
ls()
list.files()
help("list.files")
args(list.files)
args(boxplot)
old.dir-<getwd()
old.dir<-getwd()
help(dir.create())
dir.create("testdir")
setwd("testdir")
file.create("mytest.R")
ls()
getwd()
list.files
list.files()
file.exists("mytest.R")
file.info("mytest.R")
help(file.rename())
args(file.rename())
args(file.rename
args(file.rename())
args(file.rename)
file.rename("mytest.R","mytest2.R")
mytest3.R<-file.copy("mytest2.R")
args(file.copy)
file.copy("mytest2.R","mytest3.R")
file.path()
file.path("mytest3.R")
file.path("folder1","folder2")
getwd()
ls()
help(dir.create)
info()
?dir.create
ls()
dir.create(file.path('testdir2', 'testdir3'), recursive = TRUE)
getwd()
unlink("testdir2", recursive = TRUE)
dir.path("old.dir")
getwd()
setwd(old.dir)
dir.remove("testdir")
unlink("testdir",recursive='TRUE')
unlink("testdir",recursive=TRUE)
swilr()
swlir()
install.packages("RMySQL");
library(RMySQL)
mydb = dbConnect(MySQL(), user='datamartdev', password='c0m0m0l0', dbname='datamartdev', host='datamart.smartick.es')
mydb = dbConnect(MySQL(), user='datamartdev', password='c0m0m0l0', dbname='datamartdev', host='datamart.smartick.es')
library("swirl", lib.loc="~/R/win-library/3.2")
swirl()
1:20
pi:10
15:1
?`:`
seq(1,20)
sqe(0,10,by=0.5)
seq(0,10,by=0.5)
seq(5,10,length=0.5)
seq(5,10,length=30)
myseq<-seq(5,10,length=30)
my_seq<-seq(5,10,length=30)
length(my_seq)
1:length(my_seq)
seq(along.with=my_seq)
seq_along(my_seq)
rep(0,times=40)
rep(c(0,1,2),times=10)
rep(c(0,1,2),each=10)
num_vect<-c(0.5,55,-10,6)
tf<-num_vect[num_vect<1]
tf<-num_vect<1
tf
num_vect>=6
my_char<-c("my","name","is")
my_char<-c("My","name","is")
my_char
paste(mychar,collapse = " ")
paste(my_char,collapse = " ")
c(my_char,"PAAAAAAAIX")
paste(c(my_char,"PAAAAAAAIX"),collapse=" ")
paste(c(my_char,"Swirl"),collapse=" ")
c(my_char,"Swirl")
c(my_char,"paix")
my_name<-c(my_char,"paix")
my_name
paste(my_name)
paste(my_name,collapse=" ")
paste("Hello","world!",sep=" ")
paste(1:3,c("X", "Y", "Z"))
paste(c(1:3),c("X", "Y", "Z"))
paste(c(1:3),c("X", "Y", "Z"),collapse="")
paste(c(1:3),c("X", "Y", "Z"),sep ="")
LETTERS
paste(LETTERS,1:4,sep="-")
c(44,NA,5,NA)
x<-c(44,NA,5,NA)
x*3
y<-rnorm(1000)
z<-rep(NA,1000)
z
my_data<-sample(c(y,z),100)
is.na(my_data)
my_na<-is.na(my_data)
my_na
my_data==NA
sum(my_na)
my_data
0/0
Inf-Inf
x
x[1:10]
x[is.na(x)]
y<-x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x>0]
c(x[3],x[5],x[7])
c(3,5,7)
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2,-10)]
x[-c(2,10)]
vect<-c(foo=11,bar=2,norf=NA)
vect
names(vect)
vect2<-c(11,2,NA)
names(vect2)
names(vect2)<-c("foo","bar","norf")
identical(vect,vect2)
vect[Ê"bar]
vect[Ê"bar]
vect["bar]
""
dksfj
fd
quit()
;
++++
x[c(-2,-10)]
;
>
z
ZZZZ
clear()
reset()
reset()
Z
Z
library(swirl)
swirl()
x
vect["bar"]
vect[c("foo","bar")]
my_vect<-c(1:20)
my_vector<-c(1:20)
my_vector<-1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector)<-c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix<-my_vector
matrix()
matrix(my_vector)
?matrix()
?matrix
matrix(1;20,4,5)
matrix(1:20,4,5)
my_matrix<-matrix(1:20,4,5)
my_matrix2<-matrix(1:20,4,5)
identical(my_matrix,my_matrix2)
patients<-c("Bill","Gina","Kelly")
patients<-c("Bill","Gina","Kelly","Sean")
cbind(patients,my_matrix)
my_data<-data.frame(patients,my_matrix)
my_data
class(my_data)
cnames=c("patient", "age",
| "weight", "bp", "rating", "test")
cnames=c("patient", "age","weight", "bp", "rating", "test")
cnames<-c("patient", "age","weight", "bp", "rating", "test")
colnames(my_data,cnames)
colnames(my_data)<-cnames
my_data
swirl()
data(cars)
hel(cars)
help(cars)
head(cars)
plot(cars)
?plot
plot(x=cars$speed,y=cars$dist)
plot(y=cars$speed,x=cars$dist)
plot(y=cars$speed,x=cars$dist,x)
?plot
plot(y=cars$speed,x=cars$dist,xlab="Speed")
plot(x = cars$speed, y = cars$dist, xlab = "Speed")
plot(x = cars$speed, y = cars$dist, xlab = "Speed",ylab="Stopping Distance")
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed",ylab="Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed",ylab="Stopping Distance",main="My Plot")
plot(cars,main="My Plot")
plot(cars,title="My Plot Subtitle")
plot(cars,sub="My Plot Subtitle")
plot(cars,col=2)
plot(cars,xlim=c(0,15))
plot(cars,xlim=c(10,15))
plot(cars,pch=2)
data("mtcars")
data(mtcars)
head(mtcats)
head(mtcars)
dim(mtcars)
nxt()
?boxplot
boxplot(mtcars, mpg ~ cy)
head(mtcars)
boxplot(formula = mpg ~ cyl, data = mtcars)
hist(mtcars$mpg )
library(swirl)
swirl()
getwd()
ls()
x<-9
ls()
list.files()
dir()
?list.files
args(list.files)
old.dir<-getwd()
dir.create()
dir.create("tstdir")
dir.create("testdir")
setwd(testdir)
dir()
setwd("testdir")
file.create("mytest.R")
dir()
file.exists("mytest.R")
file.info("mytest.R")
file.rename("mytest.R","mytest2.R")
file.copy("mytest2.R","mytest3.R")
file.path("mytest3.R")
file.path("folder1","folder2")
?dir.create
dir.create(file.path(getwd(),"testdir3"))
getwd()
dir.create(file.path("testdir2","testdir3"))
dir.create(file.path("testdir2","testdir3"),recursive = TRUE)
unlink("testdir2")
unlink("testdir2",recursive= TRUE)
setwd()
setwd(old.dir)
unlink("testdir"")
k
adfg
fgd
l
bt
çy
ty
try3
37
rty
fdas
sfa
testInheritedMethods()
cc
++
;
<
<
>
>
>
>
>>>>>
KF
DSF
FDS
F
FSDFDA
ASFDSAFD
pollutantmean <- function(directory){
getwd()
fsda
}
mean(container$sulfate,na.rm=TRUE)
asd
mean(container$sulfate,na.rm=TRUE)
mean(container$sulfate,na.rm=TRUE)
mean(container$sulfate,na.rm=TRUE)
fas
dir()
source("pollutantmean.R")
dir()
pollutantmean <- function(directory,pollutant,id=1:332){
cx
a<-list.files(directory)
v
fds
ñ
ç
-
sdfa
a<-list.files(directory)
fdsç
--
-
source('~/R/pollutantmean.R')
setwd(~R)
setwd(~/R)
setwd("~/R"")
dsf
ewr
d
v
fd
s
makeVector <- function(x = numeric()) {
fdsç
library(swirl)
swirl()
0
quit()
con <- url("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for")
con
class(con)
a<-readLines(con)
a
read.table(con)
a
a[1]
a[2]
a[3]
dim(a)
?nchar
tail(a)
tail(a,10)
nchar(a[10])
con
con
con <- url("http://biostat.jhsph.edu/~jleek/contact.html")
a<-readLines(con)
a
nchar(a[10])
nchar(a[30])
nchar(a[20])
nchar(a[100])
con <- url("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for")
a<-readLines(con)
a
colSums(a)
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for"
lines <- readLines(url, n=10)
w <- c(1, 9, 5, 4, 1, 3, 5, 4, 1, 3, 5, 4, 1, 3, 5, 4, 1, 3)
colNames <- c("filler", "week", "filler", "sstNino12", "filler", "sstaNino12", "filler", "sstNino3", "filler", "sstaNino3", "filler", "sstNino34", "filler", "sstaNino34", "filler", "sstNino4", "filler", "sstaNino4")
d <- read.fwf(url, w, header=FALSE, skip=4, col.names=colNames)
d <- d[, grep("^[^filler]", names(d))]
sum(d[, 4])
library(httr)
require(httpuv)
require(jsonlite)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. Register an application at https://github.com/settings/applications
#    Insert your values below - if secret is omitted, it will look it up in
#    the GITHUB_CONSUMER_SECRET environmental variable.
#
#    Use http://localhost:1410 as the callback url
myapp <- oauth_app("quiz2", "ddb0d599de51ccd02f4b", secret="6af1109f6ecf442d292425087d49bb13d9bbe9c8")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
library(httr)
require(httpuv)
require(jsonlite)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. Register an application at https://github.com/settings/applications
#    Insert your values below - if secret is omitted, it will look it up in
#    the GITHUB_CONSUMER_SECRET environmental variable.
#
#    Use http://localhost:1410 as the callback url
myapp <- oauth_app("quiz2", "ddb0d599de51ccd02f4b", secret="6af1109f6ecf442d292425087d49bb13d9bbe9c8")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# 4. Use API
req <- GET("https://api.github.com/users/jtleek/repos", config(token = github_token))
stop_for_status(req)
output <- content(req)
list(output[[4]]$name, output[[4]]$created_at)
close(con)
library(swirl)
swirl()
a<-2
a
a==·
a==3
install_from_swirl("Getting And Cleaning Data")
install_from_swirl("Getting_and_Cleaning_Data")
library(swirl)
swirl()
swirl()
library(tydyr)
library(tidyr)
students
?gather
gather(students,sex,count,-grade)
students2
gather(students2)
res<-gather(students2,sex_class,count,-grade)
res
?separate
separate(res,col=sex_class,into=c("sex","class"))
options(editor = "internal")
swirl()
?n
submit()
pack_sum
quantile(pack_sum$count,probs=0.99)
top_counts<-filter(pack_sum,pack_sum$count>679)
top_counts<-filter(pack_sum,count>679)
top_counts
view(top_counts)
View(top_counts)
top_counts_sorted<-arrange(top_counts,desc(count())
fdas
top_counts_sorted<-arrange(top_counts,desc(count()))
top_counts_sorted<-arrange(top_counts,desc(count))
View(top_counts_sorted)
quantile(pack_sum$unique, probs = 0.99)
top_unique<-filter(pack_sum,unique>465)
View(pack_sum)
View(top_unique)
arrange(top_unique,desc(unique))
top_uniqye_sorted<-arrange(top_unique,desc(unique))
top_unique_sorted<-arrange(top_unique,desc(unique))
View(top_unique_sorted)
submit()
submit()
submit()
View(result3)
submit()
submit()
submit()
submit()
setwd("~/R/Cleaning Data")
source('~/R/Cleaning Data/run_analysis.R')
setwd("~/R/Cleaning Data/Peer Assessment")
source('~/R/Cleaning Data/Peer Assessment/run_analysis.R')
indexes<-grep("mean|std", features[, 2])
dim(indexes)
indexes
source('~/R/Cleaning Data/Peer Assessment/run_analysis.R')
source('~/R/Cleaning Data/Peer Assessment/run_analysis.R')
View(meandf)
source('~/R/Cleaning Data/Peer Assessment/run_analysis.R')
source('~/R/Cleaning Data/Peer Assessment/run_analysis.R')
source('~/R/Cleaning Data/Peer Assessment/run_analysis.R')
source('~/R/Cleaning Data/Peer Assessment/run_analysis.R')
